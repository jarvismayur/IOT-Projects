


#include <LedControl.h>

const int DIN_PIN = 7;
const int CLK_PIN = 6;
const int CS_PIN = 5;

LedControl lc = LedControl(DIN_PIN, CLK_PIN, CS_PIN, 1);

const char scrollText[] = "HAPPY";

// Character map stored in PROGMEM
PROGMEM const unsigned char CH_ROTATED[][8] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // space
  { 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00 }, // !
  { 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00 }, // "
  { 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00, 0x00 }, // #
  { 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00, 0x00 }, // $
  { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00, 0x00 }, // %
  { 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00, 0x00 }, // &
  { 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, // '
  { 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00 }, // (
  { 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00 }, // )
  { 0x14, 0x08, 0x3E, 0x08, 0x14, 0x00, 0x00, 0x00 }, // *
  { 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00 }, // +
  { 0x00, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ,
  { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00 }, // -
  { 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00 }, // .
  { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00 }, // /
  { 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00, 0x00 }, // 0
  { 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00 }, // 1
  { 0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x00, 0x00 }, // 2
  { 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00, 0x00, 0x00 }, // 3
  { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00, 0x00 }, // 4
  { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00, 0x00 }, // 5
  { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00, 0x00 }, // 6
  { 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00, 0x00 }, // 7
  { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00 }, // 8
  { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00, 0x00 }, // 9
  { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00 }, // :
  { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00 }, // ;
  { 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00 }, // <
  { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00, 0x00 }, // =
  { 0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00 }, // >
  { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00, 0x00 }, // ?
  { 0x3E, 0x41, 0x5D, 0x55, 0x1E, 0x00, 0x00, 0x00 }, // @
  { 0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, 0x00, 0x00 }, // A
  { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00 }, // B
  { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00, 0x00 }, // C
  { 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00, 0x00 }, // D
  { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00, 0x00 }, // E
  { 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00, 0x00 }, // F
  { 0x3E, 0x41, 0x49, 0x49, 0x7A, 0x00, 0x00, 0x00 }, // G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00, 0x00 }, // H
  { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00 }, // I
  { 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00, 0x00 }, // J
  { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00 }, // K
  { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00 }, // L
  { 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00, 0x00 }, // M
  { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00, 0x00 }, // N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00, 0x00 }, // O
  { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00 }, // P
  { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00, 0x00 }, // Q
  { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00, 0x00 }, // R
  { 0x26, 0x49, 0x49, 0x49, 0x32, 0x00, 0x00, 0x00 }, // S
  { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00, 0x00 }, // T
  { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00, 0x00 }, // U
  { 0x07, 0x18, 0x60, 0x18, 0x07, 0x00, 0x00, 0x00 }, // V
  { 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00, 0x00 }, // W
  { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00, 0x00 }, // X
  { 0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00, 0x00 }, // Y
  { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00, 0x00 }, // Z
};

void setup() {
  lc.shutdown(0, false);
  lc.setIntensity(0, 8);
  lc.clearDisplay(0);
}

void loop() {
  for (int i = 0; i < strlen(scrollText) * 8 + 1; i++) {
    for (int col = 0; col < 8; col++) {
      lc.setColumn(0, col, getCharColumn(scrollText[i / 8], col + i % 8));
    }
    delay(100);
  }
}

byte getCharColumn(char c, int col) {
  if (c >= ' ' && c <= '~') {
    return pgm_read_byte(&CH_ROTATED[c - 32][col]);
  } else {
    return 0;
  }
}
